rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // User collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Posts collection rules
    match /posts/{postId} {
      // Anyone authenticated can read posts
      allow read: if isAuthenticated();
      
      // Users can create posts if authenticated and user data matches
      allow create: if isAuthenticated() && 
                   request.resource.data.user.id == request.auth.uid;
      
      // Only post owner can update or delete
      allow update: if isAuthenticated() && 
                   resource.data.user.id == request.auth.uid;
      allow delete: if isAuthenticated() && 
                   resource.data.user.id == request.auth.uid;
      
      // Validate post data structure
      function isValidPost() {
        let post = request.resource.data;
        return post.content is string &&
               post.content.size() > 0 &&
               post.content.size() <= 1000 &&
               post.createdAt is timestamp &&
               post.user.id == request.auth.uid;
      }
    }
  }
}
